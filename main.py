from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from database import Database

from config import TOKEN_API, ADMIN, CHANEL_ID

import pygame

pygame.init()

db = Database("Database/db")

LINKS = {}  # –°–ª–æ–≤–∞—Ä—å —Å —Å—Å—ã–ª–∫–∞–º–∏ –∏ —á–µ–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∏–ª–∏

send_vote_kb = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                         one_time_keyboard=True)
send_vote_kb.row(types.InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ä–æ—Å"))

admin_kb = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                     one_time_keyboard=True)

admin_kb.row(types.InlineKeyboardButton(text="/help"))
admin_kb.row(types.InlineKeyboardButton(text="–ü–æ–∂–∞—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞"))
admin_kb.row(types.InlineKeyboardButton(text="–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç –≤ —à–∫–æ–ª–µ"))

add_admin_kb = InlineKeyboardMarkup(row_width=2)

approve_admin = InlineKeyboardButton(text='–ù–∞–∑–Ω–∞—á–∏—Ç—å',
                                     callback_data='like_admin')

disapprove_admin = InlineKeyboardButton(text='–ù–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å',
                                        callback_data='dislike_admin')

add_admin_kb.add(approve_admin, disapprove_admin)

approve_vote_kb = InlineKeyboardMarkup(row_width=2)

approve_vote = InlineKeyboardButton(text='–û–¥–æ–±—Ä–∏—Ç—å',
                                    callback_data='like')

disapprove_vote = InlineKeyboardButton(text='–ù–µ –æ–¥–æ–±—Ä–∏—Ç—å',
                                       callback_data='dislike')

approve_vote_kb.add(approve_vote, disapprove_vote)

bot = Bot(token=TOKEN_API)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    try:
        admins = db.get_admins()
        for admin in admins:
            ADMIN.append(str(*admin))

        if message.chat.type == 'private':
            if not db.user_exists(message.from_user.id):
                db.add_user(message.from_user.id)
            if message.from_user.id not in ADMIN:
                await bot.send_message(message.from_user.id, text='–î–æ—Ä–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n'
                                                                  '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—à–µ–º—É –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –æ–ø—Ä–æ—Å')

                await bot.send_sticker(chat_id=message.from_user.id,
                                       sticker='CAACAgIAAxkBAAEKQZNk_H0cnP8JG6m3Las9Jo0ISaTYaQACkBUAArTlyUvP28AHDr-D6TAE')
            elif message.from_user.id in ADMIN:
                await message.answer('–î–æ—Ä–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n–í—ã –ê–¥–º–∏–Ω–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä!üë®üèª‚Äçüíª\n\n'
                                     '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                     'sendall —Ç–µ–∫—Å—Ç   -> –°–¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ \n\n'
                                     'add_admin id    -> –î–æ–±–∞–≤–∏—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n'
                                     'delete_admin    -> –£–¥–∞–ª–∏—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n'
                                     '–¢–∞–∫-–∂–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω–æ–π/—Ç–µ—Ä—Ä–∞—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–µ–≤–æ–≥–∏',
                                     reply_markup=admin_kb)

                await bot.send_sticker(chat_id=message.from_user.id,
                                       sticker='CAACAgIAAxkBAAEKQZNk_H0cnP8JG6m3Las9Jo0ISaTYaQACkBUAArTlyUvP28AHDr-D6TAE')

    except Exception:
        print('–û—à–∏–±–∫–∞')


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    try:
        admins = db.get_admins()
        for admin in admins:
            ADMIN.append(str(*admin))

        if message.from_user.id in ADMIN:
            await message.answer('–í—ã –ê–¥–º–∏–Ω–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä!üë®üèª‚Äçüíª\n\n'
                                 '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                                 'sendall —Ç–µ–∫—Å—Ç   -> –°–¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ \n\n'
                                 'add_admin id    -> –î–æ–±–∞–≤–∏—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n'
                                 'delete_admin    -> –£–¥–∞–ª–∏—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n'
                                 '–¢–∞–∫-–∂–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∂–∞—Ä–Ω–æ–π/—Ç–µ—Ä—Ä–∞—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–µ–≤–æ–≥–∏',
                                 reply_markup=admin_kb)

        elif message.from_user.id not in ADMIN:
            await bot.send_message(message.from_user.id, text='–î–æ—Ä–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!\n\n'
                                                              '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—à–µ–º—É –±–æ—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –æ–ø—Ä–æ—Å')

    except Exception:
        print('–û—à–∏–±–∫–∞ –≤ help')


@dp.message_handler(commands=['sendall'])
async def sendall(message: types.Message):
    try:
        if message.chat.type == 'private':

            admins = db.get_admins()
            for admin in admins:
                ADMIN.append(str(*admin))

            if message.from_user.id in ADMIN:
                text = message.text[9:]
                users = db.get_users()
                for row in users:
                    try:  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–ª–æ–∫–∞–ª –ª–∏ —á–µ–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ—Ç
                        if row[0] not in ADMIN:
                            await bot.send_message(row[0], text)
                            if int(row[1]) != 1:
                                print('–ó–∞—à—ë–ª –≤ –∏—Ñ')
                                db.set_active(row[0], 1)
                    except:
                        db.set_active(row[0], 0)
                await bot.send_message(message.from_user.id, text='–†–∞—Å—Å–ª—ã–∫–∞ —É—Å–ø–µ—à–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞')

    except Exception:
        print('–û—à–∏–±–∫–∞ –≤ sendall')


@dp.message_handler(commands=['add_admin'])
async def add_admin(message: types.Message):
    try:
        if message.chat.type == 'private':
            text = message.text[11:]

            admins = db.get_admins()
            for admin in admins:
                ADMIN.append(str(*admin))

            if text.isdigit() and message.from_user.id in ADMIN:
                link.LAST_ADMIN = text
                link.LAST_USER_ID = message.from_user.id
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f'–°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {text} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?',
                                       reply_markup=add_admin_kb)

                print('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∞')
            else:
                await bot.send_message(message.from_user.id, text='–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')

    except Exception:
        print('–û—à–∏–±–∫–∞ –≤ add_admin')


@dp.message_handler(commands=['delete_admin'])
async def delete_admin(message: types.Message):
    try:
        if message.chat.type == 'private':

            admins = db.get_admins()
            for admin in admins:
                ADMIN.append(str(*admin))

            if message.from_user.id in ADMIN:
                text = message.text[14:]
                print(text)
                clear_admin_list = []
                admins = db.get_admins()
                for admin in admins:
                    clear_admin_list.append(str(*admin))
                print(clear_admin_list)
                if text in clear_admin_list:
                    db.delete_admin(text)
                else:
                    await bot.send_message(message.from_user.id, text='–ê–¥–º–∏–Ω —Å —ç—Ç–∏–º id –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω')
            else:
                await bot.send_message(message.from_user.id, text='–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')

    except Exception:
        print('–û—à–∏–±–∫–∞ –≤ delete_admin')


@dp.message_handler()
async def base(message: types.Message):
    try:
        admins = db.get_admins()
        for admin in admins:
            ADMIN.append(str(*admin))

        if message.text == '–ü–æ–∂–∞—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞' and message.from_user.id in ADMIN:
            pygame.mixer.music.load('sounds/fire.mp3')
            pygame.mixer.music.play(0)

        if message.text == '–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç –≤ —à–∫–æ–ª–µ' and message.from_user.id in ADMIN:
            pygame.mixer.music.load('sounds/terrorist.mp3')
            pygame.mixer.music.play(0)

        if "http" in message.text and "forms" in message.text and ADMIN:

            links = db.get_link()
            clear_links = []
            for element in links:
                clear_links.append(*element)
            if len(set(clear_links)) > 1:
                await message.reply(
                    text='–í–∞—à –æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Ç.–∫ —É –Ω–µ–≥–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–Ω–∏–∏ —É–∂–µ –µ—Å—Ç—å –æ–ø—Ä–æ—Å!\n\n '
                         '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ')

            else:
                link.LAST_MESSAGE = message.text
                link.LAST_USER_ID = message.from_user.id

                db.add_link(link.LAST_MESSAGE, message.from_user.id)

                await message.reply(text='–í–∞—à –æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
                if message.from_user.username is not None:
                    await bot.send_message(chat_id=ADMIN[0],
                                           text=f"@{message.from_user.username}\n\n" + link.LAST_MESSAGE,
                                           reply_markup=approve_vote_kb)
                else:
                    await bot.send_message(chat_id=ADMIN[0],
                                           text=f"–ù–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å username –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n" + link.LAST_MESSAGE,
                                           reply_markup=approve_vote_kb)

        elif message.text != "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ä–æ—Å" and not (
                message.text.isdigit() and message.from_user.id in ADMIN) and not (
                message.text == '–ü–æ–∂–∞—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞' and message.from_user.id in ADMIN) and not (
                message.text == '–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç –≤ —à–∫–æ–ª–µ' and message.from_user.id in ADMIN) and not (
                "http" in message.text and "forms" in message.text and ADMIN):
            print('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª')

        print(LINKS)

    except Exception:
        print('–û—à–∏–±–∫–∞ –≤ base')


class Link:
    def __init__(self):
        self.LAST_MESSAGE = '–ù–µ –ø—É—Å—Ç–æ'
        self.LAST_ADMIN = '–ù–µ –ø—É—Å—Ç–æ'
        self.LAST_USER_ID = 88005553535


@dp.callback_query_handler()
async def callback_approve(callback: types.CallbackQuery):
    try:
        print(callback.message.from_id)
        if callback.data == 'like':
            await bot.send_message(chat_id=CHANEL_ID, text=link.LAST_MESSAGE)
            await callback.message.delete()
            await db.set_link('–ü—É—Å—Ç–æ')
        elif callback.data == 'dislike':
            await bot.send_message(chat_id=link.LAST_USER_ID,
                                   text='–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –æ–ø—Ä–æ—Å')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–ª—É message –ß—Ç–æ –æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª
            await callback.message.delete()
            await db.set_link('–ü—É—Å—Ç–æ')

        if callback.data == 'like_admin':
            db.add_admin(link.LAST_ADMIN)
            await callback.message.delete()
        elif callback.data == 'dislike_admin':
            await callback.message.delete()

    except Exception:
        print('–û—à–∏–±–∫–∞ –≤ callback_approve')


if __name__ == "__main__":
    link = Link()
    executor.start_polling(dp, skip_updates=True)
